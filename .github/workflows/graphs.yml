name: Pluralith and Mermaid Workflow
run-name: Pluralith and Mermaid Workflow
on:
    push:
        branches:
            - main
    workflow_dispatch:
jobs:
    pluralith:
        name: Pluralith Graph Generation
        runs-on: ubuntu-latest
        steps:
            - name: Update Ubuntu
              run: sudo apt-get update

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
                aws-region: us-east-1
            
            - name: Install Pluralith 
              run: wget
                https://github.com/Pluralith/pluralith-cli/releases/download/v0.2.2/pluralith_cli_linux_amd64_v0.2.2
                && mv pluralith_cli_linux_amd64_v0.2.2 pluralith && chmod u+x pluralith && mv
                pluralith /usr/local/bin/

            - name: Pluralith login
              run: pluralith login --api-key ${{ secrets.PLURALITH_API_KEY }}

            - name: Check whether the Pluralith directory exists
              run: ls -la ~/Pluralith

            - name: Install Pluralith CLI Graphing
              run: wget
                https://github.com/Pluralith/pluralith-cli-graphing-release/releases/download/v0.2.1/pluralith_cli_graphing_linux_amd64_0.2.1
                && mv pluralith_cli_graphing_linux_amd64_0.2.1 pluralith-cli-graphing && chmod u+x pluralith-cli-graphing && mv
                pluralith-cli-graphing ~/Pluralith/bin/

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_wrapper: false

            - name: Download Terragrunt
              run: >-
                wget
                https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.6/terragrunt_linux_amd64
                && mv terragrunt_linux_amd64 terragrunt && chmod u+x terragrunt && mv
                terragrunt /usr/local/bin/terragrunt

            - name: Terragrunt Version Check
              working-directory: infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}
              run: terragrunt version                

            - name: Terragrunt Init
              working-directory: infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}
              run: terragrunt init --terragrunt-non-interactive

            - name: Look at the cache files in the directory
              run: ls -la ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/.terragrunt-cache

            - name: Find the cache directory containing providers.tf
              id: cache-dir
              run: |
                # Find the directory containing provider.tf in the cache
                CACHE_DIR=$(find ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/.terragrunt-cache -type f -name "provider.tf" -exec dirname {} \;)
                echo "Cache directory found: $CACHE_DIR"
                echo "CACHE_DIR=$CACHE_DIR" >> $GITHUB_ENV

            - name: Move providers.tf from the cache
              run: |
                # Copy the provider.tf file from the found cache directory
                if [ -f "$CACHE_DIR/provider.tf" ]; then
                  cp "$CACHE_DIR/provider.tf" ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/provider.tf
                fi

            - name: Verify the providers.tf file has been copied
              run: |
                cat ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/provider.tf

            - name: Modify all module source paths in main.tf (Remove ../../../)
              run: |
                sed -i 's|\.\./\.\./\.\./||g' ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/main.tf           

            - name: Terraform init
              working-directory: infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}
              run: terraform init

            - name: Install HCL parser
              run: sudo apt-get install -y jq

            - name: Parse terragrunt.hcl and create terraform.tfvars
              run: |

                cd ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}

                # Parse the terragrunt.hcl file to get the inputs block using jq
                INPUTS=$(grep -A 1000 "inputs =" terragrunt.hcl | tail -n +2 | head -n -1)
                
                # Remove leading/trailing spaces
                INPUTS=$(echo "$INPUTS" | sed 's/^[ \t]*//;s/[ \t]*$//')

                # Initialize terraform.tfvars file
                echo "" > terraform.tfvars

                # Convert the inputs block into a format suitable for terraform.tfvars
                echo "$INPUTS" | while IFS= read -r line
                do
                  # Replace `=` with `=` and format as terraform variable syntax
                  line=$(echo "$line" | sed -E 's/([a-zA-Z0-9_]+)\s*=\s*(.*)/\1 = \2/')
                  echo "$line" >> terraform.tfvars
                done

            - name: Verify terraform.tfvars file
              run: |
                cat ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/terraform.tfvars
            
            - name: Terraform plan
              working-directory: infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}
              run: terraform plan

            - name: Pluralith Graph Generation
              working-directory: infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}
              run: pluralith graph --local-only
            
            - name: ls in the Pluralith directory
              run: ls -la ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}

            - name: Output Pluralith_Diagram.pdf as an artifact
              uses: actions/upload-artifact@v4
              with:
                name: Pluralith_Diagram
                path: ./infrastructure/${{ secrets.SKYU_RESOURCE_NAME }}/Pluralith_Diagram.pdf
                
